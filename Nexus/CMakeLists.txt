cmake_minimum_required(VERSION 3.8)
project(Nexus)
set(D "${CMAKE_BINARY_DIR}/Dependencies" CACHE STRING
  "Path to dependencies folder.")
file(TO_NATIVE_PATH "${D}" D)
set(DEFAULT_BUILD_TYPE "Release")
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  set(CMAKE_BUILD_TYPE "${DEFAULT_BUILD_TYPE}" CACHE
    STRING "Choose the type of build." FORCE)
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
    "Debug" "Release" "MinSizeRel" "RelWithDebInfo")
endif()
if(WIN32)
  execute_process(COMMAND cmd /c
    "CALL ${CMAKE_SOURCE_DIR}\\configure.bat -DD=${D}"
    WORKING_DIRECTORY "${CMAKE_BINARY_DIR}")
elseif(UNIX)
  execute_process(COMMAND "${CMAKE_SOURCE_DIR}/configure.sh" "-DD=${D}"
    "${CMAKE_BUILD_TYPE}" WORKING_DIRECTORY "${CMAKE_BINARY_DIR}")
endif()
include(Config/dependencies.cmake)
include_directories(${NEXUS_INCLUDE_PATH})
include_directories(SYSTEM ${ASPEN_INCLUDE_PATH})
include_directories(SYSTEM ${BEAM_INCLUDE_PATH})
include_directories(SYSTEM ${BOOST_INCLUDE_PATH})
include_directories(SYSTEM ${CRYPTOPP_INCLUDE_PATH})
include_directories(SYSTEM ${DOCTEST_INCLUDE_PATH})
include_directories(SYSTEM ${LUA_INCLUDE_PATH})
include_directories(SYSTEM ${MYSQL_INCLUDE_PATH})
include_directories(SYSTEM ${OPEN_SSL_INCLUDE_PATH})
include_directories(SYSTEM ${QUICK_FIX_INCLUDE_PATH})
include_directories(SYSTEM ${SQLITE_INCLUDE_PATH})
include_directories(SYSTEM ${TCLAP_INCLUDE_PATH})
include_directories(SYSTEM ${VIPER_INCLUDE_PATH})
include_directories(SYSTEM ${YAML_INCLUDE_PATH})
include_directories(SYSTEM ${ZLIB_INCLUDE_PATH})
link_directories(${BOOST_DEBUG_PATH})
link_directories(${BOOST_OPTIMIZED_PATH})
set(TEST_INSTALL_DIRECTORY "${PROJECT_BINARY_DIR}/Tests")
set(LIB_INSTALL_DIRECTORY "${PROJECT_BINARY_DIR}/Libraries")
if(MSVC)
  set(CMAKE_LIBRARY_FLAGS "/LTCG")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /WX /bigobj /std:c++20")
  set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /GL")
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /SAFESEH:NO")
  set(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} /LTCG")
  add_definitions(-D_CRT_SECURE_NO_DEPRECATE)
  add_definitions(-DNOMINMAX)
  add_definitions(-D_SCL_SECURE_NO_WARNINGS)
  add_definitions(-D_WIN32_WINNT=0x0501)
  add_definitions(-DWIN32_LEAN_AND_MEAN)
  add_definitions(/external:anglebrackets)
  add_definitions(/external:W0)
endif()
if(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX OR
    ${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g -std=gnu++20")
  set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_RELEASE} -O2 -DNDEBUG")
endif()
if(CYGWIN)
  add_definitions(-D__USE_W32_SOCKETS)
endif()
if(${CMAKE_SYSTEM_NAME} STREQUAL "SunOS")
  set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_RELEASE} -pthreads")
endif()
add_subdirectory(Config/Accounting)
add_subdirectory(Config/AdministrationService)
add_subdirectory(Config/Backtester)
add_subdirectory(Config/ChartingService)
add_subdirectory(Config/Compliance)
add_subdirectory(Config/Definitions)
add_subdirectory(Config/DefinitionsService)
add_subdirectory(Config/FeeHandling)
add_subdirectory(Config/FixUtilities)
add_subdirectory(Config/InternalMatcher)
add_subdirectory(Config/MarketDataService)
add_subdirectory(Config/Nexus)
add_subdirectory(Config/OrderExecutionService)
add_subdirectory(Config/Parsers)
add_subdirectory(Config/Python)
add_subdirectory(Config/Queries)
add_subdirectory(Config/RiskService)
