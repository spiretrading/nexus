cmake_minimum_required(VERSION 3.8)
project(Spire)
set(D "${CMAKE_BINARY_DIR}/Dependencies" CACHE STRING
  "Path to dependencies folder.")
file(TO_NATIVE_PATH "${D}" D)
set(DEFAULT_BUILD_TYPE "Release")
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  set(CMAKE_BUILD_TYPE "${DEFAULT_BUILD_TYPE}" CACHE
    STRING "Choose the type of build." FORCE)
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
    "Debug" "Release" "MinSizeRel" "RelWithDebInfo")
endif()
if(WIN32)
  execute_process(COMMAND cmd /c
    "CALL ${CMAKE_SOURCE_DIR}\\configure.bat -DD=${D}"
    WORKING_DIRECTORY "${CMAKE_BINARY_DIR}")
elseif(UNIX)
  execute_process(COMMAND "${CMAKE_SOURCE_DIR}/configure.sh" "-DD=${D}"
    "${CMAKE_BUILD_TYPE}" WORKING_DIRECTORY "${CMAKE_BINARY_DIR}")
endif()
include(../../Nexus/Config/dependencies.cmake)
set(SPIRE_INCLUDE_PATH "${CMAKE_CURRENT_LIST_DIR}/Include")
set(SPIRE_RESOURCES_PATH "${CMAKE_CURRENT_LIST_DIR}/Resources")
set(SPIRE_SOURCE_PATH "${CMAKE_CURRENT_LIST_DIR}/Source")
set(SPIRE_LIBRARY_INSTALL_DIRECTORY "${PROJECT_BINARY_DIR}/Libraries")
set(SPIRE_TESTS_INSTALL_DIRECTORY "${PROJECT_BINARY_DIR}/Tests")
include_directories(${NEXUS_INCLUDE_PATH})
include_directories(${SPIRE_INCLUDE_PATH})
include_directories(SYSTEM ${ASPEN_INCLUDE_PATH})
include_directories(SYSTEM ${BEAM_INCLUDE_PATH})
include_directories(SYSTEM ${BOOST_INCLUDE_PATH})
include_directories(SYSTEM ${CRYPTOPP_INCLUDE_PATH})
include_directories(SYSTEM ${DOCTEST_INCLUDE_PATH})
include_directories(SYSTEM ${LUA_INCLUDE_PATH})
include_directories(SYSTEM ${OPEN_SSL_INCLUDE_PATH})
include_directories(SYSTEM ${QT_INCLUDE_PATH})
include_directories(SYSTEM ${QT_CORE_INCLUDE_PATH})
include_directories(SYSTEM ${QT_GUI_INCLUDE_PATH})
include_directories(SYSTEM ${QT_SVG_INCLUDE_PATH})
include_directories(SYSTEM ${QT_WIDGETS_INCLUDE_PATH})
include_directories(SYSTEM ${TCLAP_INCLUDE_PATH})
include_directories(SYSTEM ${YAML_INCLUDE_PATH})
include_directories(SYSTEM ${ZLIB_INCLUDE_PATH})
include_directories(${PROJECT_BINARY_DIR})
link_directories(${BOOST_DEBUG_PATH})
link_directories(${BOOST_OPTIMIZED_PATH})
set(Qt5Widgets_DIR "${QT_ROOT}/qtbase/lib/cmake/Qt5Widgets")
if(MSVC)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /WX /bigobj /std:c++17 /Wv:18")
  set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /GL")
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /SAFESEH:NO")
  set(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} /LTCG")
  add_definitions(-DBOOST_CONFIG_SUPPRESS_OUTDATED_MESSAGE)
  add_definitions(-D_CRT_SECURE_NO_DEPRECATE)
  add_definitions(-D_HAS_AUTO_PTR_ETC=1)
  add_definitions(-DNOMINMAX)
  add_definitions(-D_SCL_SECURE_NO_WARNINGS)
  add_definitions(-D_SILENCE_ALL_CXX17_DEPRECATION_WARNINGS)
  add_definitions(-D_WIN32_WINNT=0x0600)
  add_definitions(-DWIN32_LEAN_AND_MEAN)
  add_definitions(/external:anglebrackets)
  add_definitions(/external:W0)
  add_definitions(/wd4250)
endif()
if(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX OR
    ${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g -std=gnu++17")
  set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_RELEASE} -O2 -DNDEBUG")
endif()
if(CYGWIN)
  add_definitions(-D__USE_W32_SOCKETS)
endif()
if(${CMAKE_SYSTEM_NAME} STREQUAL "SunOS")
  set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_RELEASE} -pthreads")
endif()

macro(find_cpp_qobject output)
  foreach(_i ${ARGN})
    if(EXISTS ${_i})
      FILE(READ ${_i} _contents)
      STRING(REGEX MATCHALL "Q_OBJECT" _match "${_contents}")
      if(_match)
        SET(${output} ${${output}} ${_i})
      endif()
    endif()
  endforeach()
endmacro()

add_subdirectory(Config/Library)
add_subdirectory(Config/LoginUiTester)
add_subdirectory(Config/Resources)
add_subdirectory(Config/Scratch)
add_subdirectory(Config/Spire)
add_subdirectory(Config/SpireTester)
add_subdirectory(Config/StylesTester)
add_subdirectory(Config/UiViewer)
