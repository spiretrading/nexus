cmake_minimum_required(VERSION 3.28)
project(Spire LANGUAGES CXX)
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(D "${CMAKE_BINARY_DIR}/Dependencies" CACHE STRING
  "Path to dependencies folder.")
file(TO_NATIVE_PATH "${D}" D)
set(DEFAULT_BUILD_TYPE "Release")
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  set(CMAKE_BUILD_TYPE "${DEFAULT_BUILD_TYPE}" CACHE
    STRING "Choose the type of build." FORCE)
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
    "Debug" "Release" "MinSizeRel" "RelWithDebInfo")
endif()
if(WIN32)
  set(configure_script
    cmd /c "CALL ${CMAKE_SOURCE_DIR}/configure.bat -DD=${D}")
elseif(UNIX)
  set(configure_script "${CMAKE_SOURCE_DIR}/configure.sh" "-DD=${D}"
    "${CMAKE_BUILD_TYPE}")
endif()
execute_process(COMMAND ${configure_script}
  WORKING_DIRECTORY "${CMAKE_BINARY_DIR}" RESULT_VARIABLE configure_result
  OUTPUT_VARIABLE configure_output ERROR_VARIABLE configure_error
  OUTPUT_STRIP_TRAILING_WHITESPACE ERROR_STRIP_TRAILING_WHITESPACE)
if(NOT configure_result EQUAL 0)
  message(FATAL_ERROR "Configuration script failed with error:\n${configure_error}\nOutput:\n${configure_output}")
endif()
include(../../Nexus/Config/dependencies.cmake)
set(SPIRE_INCLUDE_PATH "${CMAKE_CURRENT_LIST_DIR}/Include")
set(SPIRE_LEGACY_RESOURCES_PATH "${CMAKE_CURRENT_LIST_DIR}/LegacyResources")
set(SPIRE_RESOURCES_PATH "${CMAKE_CURRENT_LIST_DIR}/Resources")
set(SPIRE_SOURCE_PATH "${CMAKE_CURRENT_LIST_DIR}/Source")
set(SPIRE_LIBRARY_INSTALL_DIRECTORY "${PROJECT_BINARY_DIR}/Libraries")
set(SPIRE_TESTS_INSTALL_DIRECTORY "${PROJECT_BINARY_DIR}/Tests")
include_directories(${NEXUS_INCLUDE_PATH})
include_directories(${SPIRE_INCLUDE_PATH})
include_directories(SYSTEM ${ASPEN_INCLUDE_PATH})
include_directories(SYSTEM ${BEAM_INCLUDE_PATH})
include_directories(SYSTEM ${BOOST_INCLUDE_PATH})
include_directories(SYSTEM ${CRYPTOPP_INCLUDE_PATH})
include_directories(SYSTEM ${DOCTEST_INCLUDE_PATH})
include_directories(SYSTEM ${LUA_INCLUDE_PATH})
include_directories(SYSTEM ${OPEN_SSL_INCLUDE_PATH})
include_directories(SYSTEM ${QT_INCLUDE_PATH})
include_directories(SYSTEM ${QT_CORE_INCLUDE_PATH})
include_directories(SYSTEM ${QT_GUI_INCLUDE_PATH})
include_directories(SYSTEM ${QT_SVG_INCLUDE_PATH})
include_directories(SYSTEM ${QT_WIDGETS_INCLUDE_PATH})
include_directories(SYSTEM ${TCLAP_INCLUDE_PATH})
include_directories(SYSTEM ${VIPER_INCLUDE_PATH})
include_directories(SYSTEM ${YAML_INCLUDE_PATH})
include_directories(SYSTEM ${ZLIB_INCLUDE_PATH})
include_directories(${PROJECT_BINARY_DIR})
link_directories(${BOOST_DEBUG_PATH})
link_directories(${BOOST_OPTIMIZED_PATH})
set(Qt5Widgets_DIR "${QT_ROOT}/qtbase/lib/cmake/Qt5Widgets")
add_compile_definitions(QT_NO_KEYWORDS)
if(MSVC)
  add_compile_options(/bigobj /external:anglebrackets /external:W0
    $<$<CONFIG:Release>:/GL> /WX)
  add_compile_definitions(_CRT_SECURE_NO_DEPRECATE NOMINMAX
    _SCL_SECURE_NO_WARNINGS WIN32_LEAN_AND_MEAN _WIN32_WINNT=0x0600)
  add_link_options($<$<CONFIG:Release>:/LTCG>)
  set(PCH_CPP_FILE "${CMAKE_BINARY_DIR}/Pch.cpp")
  file(WRITE "${PCH_CPP_FILE}" "#include \"Pch.hpp\"\n")
  add_library(Pch OBJECT Pch.cpp)
  target_compile_options(Pch PRIVATE "/YcPch.hpp"
    "/Fp${SPIRE_LIBRARY_INSTALL_DIRECTORY}/$<CONFIG>/Pch.pch")
  add_custom_command(
    OUTPUT "${SPIRE_LIBRARY_INSTALL_DIRECTORY}/$<CONFIG>/Pch.pch"
    COMMAND ${CMAKE_COMMAND} -E touch "${SPIRE_LIBRARY_INSTALL_DIRECTORY}/$<CONFIG>/Pch.pch"
    DEPENDS $<TARGET_OBJECTS:Pch>
    BYPRODUCTS "${SPIRE_LIBRARY_INSTALL_DIRECTORY}/$<CONFIG>/Pch.pch"
  )
  add_custom_target(MarkPch ALL DEPENDS "${SPIRE_LIBRARY_INSTALL_DIRECTORY}/$<CONFIG>/Pch.pch")

elseif(CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang")
  add_compile_options(-g $<$<CONFIG:Release>:-DNDEBUG>)
  if(${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang")
    add_compile_options(-fsized-deallocation)
  endif()
endif()
if(CYGWIN)
  add_compile_definitions(__USE_W32_SOCKETS)
endif()
if(CMAKE_SYSTEM_NAME STREQUAL "SunOS")
  add_compile_options($<$<CONFIG:Release>:-pthreads>)
endif()

macro(find_cpp_qobject output)
  foreach(_i ${ARGN})
    if(EXISTS ${_i})
      FILE(READ ${_i} _contents)
      STRING(REGEX MATCHALL "Q_OBJECT" _match "${_contents}")
      if(_match)
        SET(${output} ${${output}} ${_i})
      endif()
    endif()
  endforeach()
endmacro()

add_subdirectory(Config/AccountViewer)
add_subdirectory(Config/Async)
add_subdirectory(Config/Blotter)
add_subdirectory(Config/BookView)
add_subdirectory(Config/Canvas)
add_subdirectory(Config/CanvasView)
add_subdirectory(Config/Catalog)
add_subdirectory(Config/Charting)
add_subdirectory(Config/Dashboard)
add_subdirectory(Config/InputWidgets)
add_subdirectory(Config/KeyBindings)
add_subdirectory(Config/LegacyResources)
add_subdirectory(Config/LegacyUI)
add_subdirectory(Config/Library)
add_subdirectory(Config/OrderImbalanceIndicator)
add_subdirectory(Config/PortfolioViewer)
add_subdirectory(Config/Resources)
add_subdirectory(Config/RiskTimer)
add_subdirectory(Config/Scratch)
add_subdirectory(Config/SignIn)
add_subdirectory(Config/Spire)
add_subdirectory(Config/SpireTester)
add_subdirectory(Config/StyleParser)
add_subdirectory(Config/Styles)
add_subdirectory(Config/TimeAndSales)
add_subdirectory(Config/Toolbar)
add_subdirectory(Config/UiViewer)
add_subdirectory(Config/Utilities)

if(MSVC)
  function(use_pch target)
    target_sources(${target} PRIVATE $<TARGET_OBJECTS:Pch>)
    target_compile_options(${target} PRIVATE "/FIPch.hpp" "/YuPch.hpp"
      "/Fp${SPIRE_LIBRARY_INSTALL_DIRECTORY}/$<CONFIG>/Pch.pch")
    add_dependencies(${target} MarkPch)
  endfunction()
  file(GLOB configs RELATIVE "${CMAKE_CURRENT_SOURCE_DIR}/Config" "Config/*")
  foreach(config ${configs})
    if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/Config/${config}/CMakeLists.txt" AND
        TARGET ${config})
      use_pch(${config})
    endif()
  endforeach()
endif()
